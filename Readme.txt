# AI Python Code Correction Project

This project contains two main components:
1.  **Self-Correcting Agent**: An autonomous AI agent (`generated_agent/agent.py`) that iteratively runs tests against a target project, analyzes failures, and uses an LLM to generate and apply fixes to the code. It can also attempt to fix itself if it fails repeatedly.
2.  **Web App**: A Flask-based web application (`app.py`) that provides a simple UI for users to paste broken Python code and receive an AI-generated fix.

## 1. Setup

### Prerequisites

* Python 3.x
* A Google API Key for the Gemini API.

### Installation

1.  **Clone the repository (if applicable)**

2.  **Set up the API Key**
    Create a file named `.env` in the root directory and add your Google API Key:
    ```
    GOOGLE_API_KEY="your_api_key_here"
    ```

3.  **Install Dependencies**
    Install the required Python packages using `requirements.txt`:
    ```bash
    pip install -r requirements.txt
    ```

## 2. Running the Self-Correcting Agent

This agent is designed to fix the code in the `target_project/` directory by running tests from the `test_suite/`.

### Step 1: Generate the Agent (if needed)

The agent code (`agent.py`) is generated by `smol_dev.py` based on the instructions in `main.prompt`.

* **To generate or regenerate the agent:**
    ```bash
    python smol_dev.py
    ```
    This will create/overwrite the file at `generated_agent/agent.py`.

### Step 2: Run the Agent

* **Navigate to the agent's directory and execute it:**
    ```bash
    cd generated_agent
    python agent.py
    ```
* The agent will start its process:
    1.  Back up the `target_project`.
    2.  Run `pytest` on the `test_suite`.
    3.  If tests fail, it will parse the error, read the failing file, and call the Gemini API to generate a fix.
    4.  It will apply the fix and repeat the process for up to `MAX_ATTEMPTS`.
    5.  If it succeeds, it will log "SUCCESS" and clean up the backup.
    6.  If it fails after all attempts, it will log "FAILURE" and attempt to self-improve by rewriting its own code.
    7.  The project will be restored from the backup in case of failure or at the end of the run.

* Logs for the agent's run are saved in `generated_agent/agent.log`.

## 3. Running the Web App

This component runs a local web server that provides an AI code corrector interface.

1.  **Ensure your `.env` file is in the root directory.**
2.  **Run the Flask app:**
    ```bash
    flask run
    ```
    (Or `python app.py`)

3.  **Access the application**
    Open your web browser and go to `http://127.0.0.1:5000`. You can paste your Python code into the text area and click "Fix My Code" to get an AI-corrected version.