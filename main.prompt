You are Smol Developer.

Your task is to generate a single Python file named `agent.py`.

This agent will use Google's Gemini API to automatically fix code in a target project by running tests, analyzing errors, and applying self-generated fixes.

Follow these exact specifications:

# Project Goal
Create a self-improving coding agent that:
1. Backs up a target project.
2. Runs pytest tests.
3. Detects errors and identifies which file caused them.
4. Uses an LLM (Gemini model) to generate corrected code.
5. Applies the fix to the file.
6. Repeats up to N attempts until all tests pass.
7. Restores from backup if unrecoverable errors occur.

# Technical Specifications
- The main file must be named `agent.py`.
- Use Python 3 and standard libraries (`os`, `sys`, `subprocess`, `logging`, `shutil`, `re`).
- Use `google.generativeai` for the Gemini model.
- Use model name `"gemini-2.0-flash"`.
- The environment variable `GOOGLE_API_KEY` must be read using `os.environ.get("GOOGLE_API_KEY")`.
- If the API key is missing, log an error and exit.
- Set up a logger that writes to `agent.log`.

# Directory Configuration
TARGET_DIR = "../target_project/"
TEST_DIR = "../test_suite/"
BACKUP_DIR = "../target_project_backup/"

# Core Functions

1. backup_project()
   - Copies the target project to the backup directory.
   - Removes any existing backup before copying.

2. restore_project()
   - Restores the target project from the backup.
   - If no backup exists, logs a warning.

3. run_tests()
   - Runs pytest on TEST_DIR using:
     subprocess.run([sys.executable, "-m", "pytest", TEST_DIR], capture_output=True, text=True, check=False)
   - Returns the result object.
   - Logs the return code.

4. generate_fix(stderr)
   - Parses the failing file path from stderr using regex.
   - Reads the source code of the failing file.
   - Constructs a prompt for the Gemini model:
     You are an expert developer. Fix the code based on the error message.
     The error is:
     {stderr}
     The code for {full_file_path} is:
     ```python
     {source_code}
     ```
     Provide only the complete, corrected Python code for the file,
     without any explanations or markdown formatting like ```python.
   - Sends the prompt to Gemini using:
     response = model.generate_content(prompt)
     fixed_code = response.text
   - Cleans up markdown formatting and returns (file_path, fixed_code).

5. apply_fix(file_path, fixed_code)
   - Writes the fixed code to the target file, overwriting it.

6. main()
   - Backs up the project.
   - Runs tests up to MAX_ATTEMPTS times.
   - If tests fail:
     - Calls generate_fix().
     - Applies the fix using apply_fix().
     - Re-runs tests.
     - Restores project if tests still fail after all attempts.
   - Logs all progress and errors.

# Constants
MODEL_NAME = "gemini-2.0-flash"
MAX_ATTEMPTS = 3
LOG_FILE = "agent.log"

# Control Flow
- If tests pass → log success → stop loop.
- If tests fail after all retries → restore backup → log failure.
- Always ensure clean exit.

# Output
Produce the complete final Python source code for `agent.py` implementing all of the above logic exactly as specified.
No explanations, markdown, or extra commentary — output only valid Python code.
